# -*- python -*-
# ex: set filetype=python:

import os
import yaml

from buildbot.plugins import *  # noqa
from buildbot.status import html
from buildbot.status.web import authz, auth


dirname = os.path.dirname(__file__)

with open(os.path.join(dirname, 'workers.yaml')) as file:
    workers = yaml.load(file)

with open(os.path.join(dirname, 'jobs.yaml')) as file:
    jobs = yaml.load(file)


c = BuildmasterConfig = {
    # TODO: We'll need secure communitation with the workers.
    'protocols': {'pb': {'port': 9989}}
}

c['slaves'] = [buildslave.BuildSlave(w['login'], w['password'])
               for w in workers]


def make_change_source(job):
    params = dict(
        repourl=job['repo-url'],
        branch=job['branch'],
        project=job['id'],
        category='spawn',
        workdir=job['id'] + '-poller',
        pollAtLaunch=True,
        pollInterval=30
    )
    if job['vcs-type'] == 'git':
        return changes.GitPoller(**params)
    if job['vcs-type'] == 'hg':
        return changes.HgPoller(**params)
    raise ValueError('Unrecognized VCS type: ' + job['vcs-type'])


c['change_source'] = map(make_change_source, jobs)


def make_force_scheduler(jobs):
    """Scheduler that allows forcing of builds."""
    return schedulers.ForceScheduler(
        name='force',
        builderNames=[job['name'] for job in jobs]
    )


def make_spawn_scheduler(job):
    """Scheduler for spawn builds."""
    return schedulers.SingleBranchScheduler(
        name=job['id'] + '-spawn',
        change_filter=util.ChangeFilter(project=job['id'],
                                        branch=job['branch'],
                                        category='spawn'),
        builderNames=[job['name']],
        treeStableTimer=None
    )


def make_main_scheduler(job):
    """Scheduler for spawning builds."""
    return schedulers.Triggerable(
        name=job['id'] + '-build',
        builderNames=[job['name'] + ' build']
    )


c['schedulers'] = (
    [make_force_scheduler(jobs)] +
    map(make_spawn_scheduler, jobs) +
    map(make_main_scheduler, jobs)
)


def make_vcs_step(job):
    if job['vcs-type'] == 'git':
        return steps.Git(repourl=job['repo-url'], mode='incremental')
    if job['vcs-type'] == 'hg':
        return steps.Mercurial(repourl=job['repo-url'], mode='incremental',
                               branchType='inrepo')
    raise ValueError('Unrecognized VCS type: ' + job['vcs-type'])


class MatrixTrigger(steps.Trigger):
    """Trigger that starts all builds in the build matrix."""

    def getSchedulersAndProperties(self):
        matrix = self.getProperty('build-matrix').split('\n')
        sch = self.schedulerNames[0]
        triggered = [(sch, {'buildconf': buildconf}) for buildconf in matrix]
        return triggered


def make_spawn_builder(job):
    """Builder that generates the build matrix and spawns real builds."""
    return util.BuilderConfig(
        name=job['name'],
        slavenames=[w['login'] for w in workers],
        factory=util.BuildFactory([
            make_vcs_step(job),
            steps.SetPropertyFromCommand(
                command='python run.py matrix',
                property='build-matrix'
            ),
            MatrixTrigger(
                schedulerNames=[job['id'] + '-build'],
                waitForFinish=True,
            ),
        ])
    )


def make_main_builder(job):
    """Builder that generates the build matrix and spawns real builds."""
    return util.BuilderConfig(
        name=job['name'] + ' build',
        slavenames=[w['login'] for w in workers],
        mergeRequests=False,
        factory=util.BuildFactory([
            make_vcs_step(job),
            steps.ShellCommand(
                command=['python', 'run.py',
                         util.Interpolate('%(prop:buildconf)s')]
            )
        ])
    )


c['builders'] = (map(make_spawn_builder, jobs) +
                 map(make_main_builder, jobs))


authz_cfg = authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([('root', 'toor')]),
    gracefulShutdown=False,
    forceBuild='auth',  # use this to test your slave once it is set up
    forceAllBuilds='auth',  # ..or this
    pingBuilder=False,
    stopBuild=False,
    stopAllBuilds=False,
    cancelPendingBuild=False,
)

c['status'] = [html.WebStatus(http_port=8080, authz=authz_cfg)]

c['title'] = 'Buildbot-in-a-box'
c['titleURL'] = 'http://10.8.10.8:8080/'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.
c['buildbotURL'] = 'http://10.8.10.8:8080/'

c['db'] = {
    'db_url': 'sqlite:///state.sqlite',
}
